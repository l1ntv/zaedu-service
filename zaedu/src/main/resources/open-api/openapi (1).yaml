openapi: 3.0.2
info:
  title: Zaedu API
  version: 1.0.0
  description: REST API для платформы Zaedu
servers:
  - url: https://api.zaedu.com/v1
    description: Production server

tags:
  - name: Authentication
  - name: Clients
  - name: Masters
  - name: Orders

paths:
  /auth/register/master:
    post:
      tags:
        - Authentication
      summary: Регистрация мастера
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterRegistrationRequest'
      responses:
        '201':
          description: Успешная регистрация
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /auth/register/client:
    post:
      tags:
        - Authentication
      summary: Регистрация клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRegistrationRequest'
      responses:
        '201':
          description: Успешная регистрация
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Авторизация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login: { type: string }
                password: { type: string }
              required: [ login, password ]
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        '400':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        '423':
          description: Пользователь заблокирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /clients/my-profile:
    get:
      tags:
        - Clients
      summary: Основная информация клиента
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientMainResponse'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /clients/my-orders:
    get:
      tags:
        - Clients
      summary: Список заказов клиента
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientOrder'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /clients/update:
    put:
      tags:
        - Clients
      summary: Обновление профиля клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdateRequest'
      responses:
        '200':
          description: Профиль обновлен
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /masters:
    get:
      tags:
        - Masters
      summary: Поиск мастеров по категории
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Список мастеров
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MastersListResponse'
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /masters/{id}:
    get:
      tags:
        - Masters
      summary: Профиль мастера
      parameters:
        - $ref: '#/components/parameters/MasterId'
      responses:
        '200':
          description: Профиль мастера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterProfile'
        '404':
          description: Мастер не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /masters/my-public-profile:
    get:
      tags:
        - Masters
      summary: Получение публичного профиля мастера
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Профиль успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterProfile'
        '404':
          description: Профиль мастера не найден

  /masters/my-private-profile:
    get:
      tags:
        - Masters
      summary: Получение приватного профиля мастера
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Профиль успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterProfileForMeDTO'
        '404':
          description: Профиль мастера не найден

  /masters/update-public-profile:
    put:
      tags:
        - Masters
      summary: Обновление профиля мастера
      parameters:
        - $ref: '#/components/parameters/MasterId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterUpdateRequest'
      responses:
        '200':
          description: Профиль обновлен
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /masters/update-private-profile:
    put:
      tags:
        - Masters
      summary: Обновление приватного профиля мастера
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterPrivateProfileUpdateRequestDTO'
      responses:
        '200':
          description: Профиль успешно обновлен
        '400':
          description: Некорректные данные в запросе
        '403':
          description: Необходима авторизация
        '404':
          description: Профиль мастера не найден

  /orders:
    get:
      tags:
        - Orders
      summary: Выставленные заказы клиентами
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список выставленных заказов клиентами, фото и баланс мастера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsOrdersResponse'
        '403':
          description: Мастер не был авторизован
          content: { }
        '404':
          description: Статус заказа не найден/Авторизованный пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /orders/{orderId}/assign-order:
    patch:
      tags:
        - Orders
      summary: Взятие выставленного клиентом заказа мастером
      security:
        - bearerAuth: [ ]
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID заказа
          schema:
            type: integer
      responses:
        '200':
          description: Мастер забрал заказа клиента
          content: { }
        '403':
          description: Мастер не был авторизован
          content: { }
        '404':
          description: Заказ не найден/Статус заказа не найден/Авторизованный пользователь не найден/Профиль мастера не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Заказ уже забрал другой мастер
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /orders/get-services:
    get:
      tags:
        - Orders
      summary: Получение списка всех сервисов в системе
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список всех сервисов в системе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumServicesResponse'

  /orders/create-order:
    post:
      tags:
        - Orders
      summary: Выставление заказа клиентом
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedOrderRequest'
      responses:
        '200':
          description: Клиент выставил заказ
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Авторизованный пользователь не найден/Профиль клиента не найден/Сервис не найден/Статус заказа не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Дублирование выставленного заказа
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /orders/{orderId}/close-order:
    patch:
      tags:
        - Orders
      summary: Закрытие заказа клиентом
      security:
        - bearerAuth: [ ]
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID заказа
          schema:
            type: integer
      responses:
        '200':
          description: Клиент закрыл заказ
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Авторизованный пользователь не найден/Профиль клиента не найден/Статус заказа не найден/Заказ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /orders/{masterId}/offer-order:
    patch:
      tags:
        - Orders
      summary: Предложение заказа мастеру от клиента
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedOrderRequest'
      parameters:
        - name: masterId
          in: path
          required: true
          description: ID мастера
          schema:
            type: integer
      responses:
        '200':
          description: Клиент предложил заказ мастеру
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Авторизованный пользователь не найден/Профиль клиента не найден/Профиль мастера не найден/Сервис не найден/Статус заказа не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Дублирование предложенного заказа
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /orders/{orderId}/accept-order:
    patch:
      tags:
        - Orders
      summary: Принятие заказа мастером
      security:
        - bearerAuth: [ ]
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID заказа
          schema:
            type: integer
      responses:
        '200':
          description: Мастер принял заказ
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Авторизованный пользователь не найден/Заказ не найден/Профиль мастера не найден/Статус заказа не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Заказ был отправлен не авторизованному мастеру, а какому-то другому мастеру
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /orders/{orderId}/decline-order:
    patch:
      tags:
        - Orders
      summary: Отклонение заказа мастером
      security:
        - bearerAuth: [ ]
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID заказа
          schema:
            type: integer
      responses:
        '200':
          description: Мастер отказался от заказа
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Авторизованный пользователь не найден/Заказ не найден/Профиль мастера не найден/Статус заказа не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Заказ был отправлен не авторизованному мастеру, а какому-то другому мастеру
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /masters/my-orders:
    get:
      tags:
        - Masters
      summary: Получение списка заказов мастера
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список заказов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderMasterDTO'
        '401':
          description: Необходима авторизация
        '404':
          description: Заказы мастера не найдены

  /feedback/{orderId}:
    patch:
      tags:
        - Feedback
      summary: Оставление отзыва на заказ от клиента
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID заказа
          schema:
            type: integer
      responses:
        '200':
          description: Клиент оставил отзыв
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Данные отзыва некорректные/Авторизованный пользователь не найден/Профиль клиента не найден/Профиль мастера не найден/Заказ не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Дублирование отзыва/Заказ не принадлежит клиенту
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /finance/withdrawal:
    patch:
      tags:
        - Finance
      summary: Вывод денег с баланса
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinanceOperationRequest'
      responses:
        '200':
          description: В сервис финансов был отправлен запрос. Баланс пользователя будет обновлен спустя время.
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Авторизованный пользователь не найден/Финансовый баланс не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /finance/replenishment:
    patch:
      tags:
        - Finance
      summary: Пополнение денег баланса
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinanceOperationRequest'
      responses:
        '200':
          description: В сервис финансов был отправлен запрос. Баланс пользователя будет обновлен спустя время.
          content: { }
        '403':
          description: Клиент не был авторизован
          content: { }
        '404':
          description: Авторизованный пользователь не найден/Финансовый баланс не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  schemas:
    FinanceOperationRequest:
      type: object
      properties:
        moneyCount: { type: integer }
      required: [ moneyCount ]

    FeedbackRequest:
      type: object
      properties:
        evaluation: { type: integer }
        description: { type: string, maxLength: 255 }
      required: [ evaluation, description ]

    ClientRegistrationRequest:
      type: object
      properties:
        login: { type: string, format: email }
        password: { type: string, minLength: 8 }
      required: [ login, password ]

    MasterRegistrationRequest:
      type: object
      properties:
        login: { type: string, format: email }
        password: { type: string, minLength: 8 }
        lastName: { type: string }
        firstName: { type: string }
        patronymic: { type: string }
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        isOrganization: { type: boolean }
        organizationName: { type: string }
      required: [ login, password, lastName, firstName, services ]

    CreatedOrderRequest:
      type: object
      properties:
        serviceName: { type: string }
        description: { type: string }
        price: { type: integer }
        address: { type: string }
        dateFrom: { type: string, format: date }
        dateTo: { type: string, format: date }
      required: [ serviceName, description, price, address, dateFrom, dateTo ]

    EnumServicesResponse:
      type: object
      properties:
        services:
          type: array
          items:
            { type: string }
      required: [ services ]

    ClientMainResponse:
      type: object
      properties:
        photoUrl: { type: string, format: uri }
        balance: { type: integer }

    ClientOrder:
      type: object
      properties:
        serviceType:
          type: string
          enum: [ DECORATOR, SOUND_ENGINEER, LIGHT_ENGINEER, PHOTOGRAPHER, VIDEOGRAPHER, CHEF, WAITER, HOST ]
        description: { type: string }
        address: { type: string }
        price: { type: integer }
        dateFrom: { type: string, format: date }
        dateTo: { type: string, format: date }
        phoneMaster: { type: string }

    ClientUpdateRequest:
      type: object
      properties:
        surname: { type: string }
        name: { type: string }
        patronymic: { type: string }
        email: { type: string }
        telephoneNumber: { type: string }
        city: { type: string }
        mainImage: { type: string }

    Service:
      type: object
      properties:
        serviceName:
          type: string
          enum: [ DECORATOR, SOUND_ENGINEER, LIGHT_ENGINEER, PHOTOGRAPHER, VIDEOGRAPHER, CHEF, WAITER, HOST ]
        cost: { type: integer }

    MasterProfile:
      type: object
      properties:
        id: { type: integer }
        fullName: { type: string }
        description: { type: string }
        onlineStatus: { type: boolean }
        photos:
          type: array
          items: { type: string, format: uri }
        personalPhoto: { type: string, format: uri }
        averageRating: { type: number, format: float }
        ratingCount: { type: integer }
        passportVerified: { type: boolean }
        contractWork: { type: boolean }
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        districts:
          type: array
          items:
            type: string
        reports:
          type: array
          items:
            $ref: '#/components/schemas/Report'

    MastersListResponse:
      type: object
      properties:
        masters:
          type: array
          items:
            $ref: '#/components/schemas/MasterProfile'
        photoUrl: { type: string, format: uri }
        balance: { type: integer }

    Report:
      type: object
      properties:
        id: { type: integer }
        text: { type: string }
        rating: { type: integer }
        date: { type: string, format: date }

    MasterPrivateProfileUpdateRequestDTO:
      type: object
      properties:
        surname:
          type: string
          description: Фамилия мастера
        name:
          type: string
          description: Имя мастера
        patronymic:
          type: string
          description: Отчество мастера
        email:
          type: string
          format: email
          description: Email мастера
        telephoneNumber:
          type: string
          description: Номер телефона мастера
        isCompany:
          type: boolean
          description: Является ли мастер компанией
        passportSeries:
          type: string
          description: Серия паспорта мастера
        passportNumber:
          type: string
          description: Номер паспорта мастера

    MasterUpdateRequest:
      type: object
      properties:
        description: { type: string }
        personalPhoto:
          type: string
          format: uri
          nullable: true
          description: URL основного изображения профиля (необязательный параметр)
        photos:
          type: array
          items: { type: string, format: uri }
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        districts:
          type: array
          items:
            type: string


    MasterProfileForMeDTO:
      type: object
      properties:
        surname:
          type: string
          description: Фамилия мастера
        name:
          type: string
          description: Имя мастера
        patronymic:
          type: string
          description: Отчество мастера
        email:
          type: string
          format: email
          description: Email мастера
        telephoneNumber:
          type: string
          description: Номер телефона мастера
        isCompany:
          type: boolean
          description: Является ли мастер компанией
        isConfirmedPassport:
          type: boolean
          description: Подтвержден ли паспорт мастера
        passportSeries:
          type: string
          description: Серия паспорта мастера
        passportNumber:
          type: string
          description: Номер паспорта мастера

    OrderMasterDTO:
      type: object
      properties:
        serviceType:
          type: string
          description: Тип услуги
        description:
          type: string
          description: Описание заказа
        address:
          type: string
          description: Адрес выполнения заказа
        price:
          type: integer
          description: Цена заказа
        dateFrom:
          type: string
          format: date
          description: Дата начала выполнения заказа
        dateTo:
          type: string
          format: date
          description: Дата окончания выполнения заказа
        phoneClient:
          type: string
          description: Номер телефона клиента

    ClientsOrdersResponse:
      type: object
      properties:
        placedOrdersByClients:
          type: array
          items:
            $ref: '#/components/schemas/PlacedOrdersByClientsResponse'
        photoUrl: { type: string }
        balance: { type: integer }
      required: [ placedOrdersByClients, balance ]

    PlacedOrdersByClientsResponse:
      type: object
      properties:
        id: { type: integer }
        serviceDTO: { $ref: '#/components/schemas/Service' }
        clientName: { type: string }
        address: { type: string }
        price: { type: integer }
        dateFrom: { type: string, format: date }
        dateTo: { type: string, format: date }


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    MasterId:
      name: id
      in: path
      description: ID мастера
      required: true
      schema:
        type: integer

  responses:
    UnauthorizedError:
      description: Неавторизованный доступ
      content:
        application/json:
          schema:
            type: object
            properties:
              error: { type: string }